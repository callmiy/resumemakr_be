use Mix.Config

config :pbkdf2_elixir, :rounds, 100_000

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.

database_url =
  System.get_env("DATABASE_URL") ||
    raise """
    environment variable DATABASE_URL is missing.
    For example: ecto://USER:PASS@HOST/DATABASE
    """

secret_key_base =
  System.get_env("SECRET_KEY_BASE") ||
    raise """
    environment variable SECRET_KEY_BASE is missing.
    You can generate one by calling: mix phx.gen.secret
    """

config :data, Data.Repo,
  # ssl: true,
  url: database_url,
  pool_size:
    System.get_env("POOL_SIZE")
    |> String.to_integer()
    |> Kernel.||(18)

port =
  System.get_env("PORT")
  |> Kernel.||(raise "environment variable PORT is missing")
  |> String.to_integer()

config :web, Web.Endpoint,
  http: [:inet6, port: port],
  url: [scheme: "https", host: "resumemakr.herokuapp.com", port: port],
  secret_key_base: secret_key_base,
  force_ssl: [rewrite_on: [:x_forwarded_proto]],
  check_origin: [
    "//localhost",
    "//resumemakr.netlify.com",
    "//resumemakr-staging.netlify.com"
  ]

config :web, front_end_url: "https://resumemakr.netlify.com"

config :data, Data.Guardian,
  issuer: "resumemakr",
  secret_key: secret_key_base
config :arc,
  storage: Arc.Storage.GCS,
  storage_dir: "resumemakr",
  bucket: System.get_env("BUCKET")

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the prev
i   ous section and set y(ur `:url` port to 443:
#
    #         config :web, Web.Endpoint,
    )
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         :inet6,
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :web, Web.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Do not print debug messages in production
config :logger, level: :info
